/*
 * Copyright 2020 Frederic Rible <f1oat@f1oat.org>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.f1oat.launchpad.x.gateway;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JButton;

/**
 *
 * @author f1oat
 */
public class JPanelKeyboard extends javax.swing.JPanel {

    final private JButton[][] pads = new JButton[9][9]; //Declared much earlier in the program, right after the class declaration.
    final private float lighting = 0.15f;
    String arrow = ">";
    String[] topRow = { "^", "v", "<", ">", "O", "S", "+", "s", "X" };
    /**
     * Creates new form Keyboard
     */
    public JPanelKeyboard() {
        //super.setSize(400, 400);
        super.setLayout(new GridLayout(9, 9));
        super.setBackground(Color.DARK_GRAY);

        int padWidth = super.getWidth() / 9;
        int padHeight = super.getHeight() / 9;
        int grey = (int) (255 * lighting);

        for (int r = 0; r < 9; r++) {
            for (int c = 0; c < 9; c++) {
                final JButton btn = new JButton();
                btn.setPreferredSize(new Dimension(padWidth, padHeight));
                Font newButtonFont = new Font(btn.getFont().getName(), Font.BOLD, btn.getFont().getSize());
                btn.setFont(newButtonFont);

                if (r == 0) {
                    btn.setBackground(Color.BLACK);
                    btn.setForeground(Color.WHITE);
                    btn.setText(topRow[c]);
                } else if (c == 8) {
                    btn.setBackground(new Color(grey, grey, grey));
                    btn.setForeground(Color.WHITE);
                    btn.setText(arrow);
                } else {
                    btn.setBackground(new Color(grey, grey, grey));
                    btn.setForeground(Color.WHITE);
                }

                final int index = 11 + 10 * (8 - r) + c;
                final JPanelKeyboard panel = this;

                MouseListener mouseListener = new MouseAdapter() {
                    public void mousePressed(MouseEvent e) {
                        for (KeyListener l : panel.getKeyListeners()) {
                            l.keyPressed(new KeyEvent(panel, 0, 0, 0, index, 'x'));
                        }
                    }

                    public void mouseReleased(MouseEvent mouseEvent) {
                        for (KeyListener l : panel.getKeyListeners()) {
                            l.keyReleased(new KeyEvent(panel, 0, 0, 0, index, 'x'));
                        }
                    }
                };

                btn.addMouseListener(mouseListener);
                super.add(btn);
                pads[r][c] = btn;
            }
        }
    }

    public void setPadColor(int index, int r, int g, int b) {
        int row = 8 - (int) ((index - 11) / 10);
        int col = (index - 11) % 10;
        if (row < 0 || row > 8 || col < 0 || col > 8) {
            return;
        }

        r = (int) (255 * lighting + (1 - lighting) * 2 * r);
        g = (int) (255 * lighting + (1 - lighting) * 2 * g);
        b = (int) (255 * lighting + (1 - lighting) * 2 * b);

        if (row == 0) {
            pads[row][col].setForeground(new Color(r, g, b));
        } else {
            pads[row][col].setBackground(new Color(r, g, b));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
